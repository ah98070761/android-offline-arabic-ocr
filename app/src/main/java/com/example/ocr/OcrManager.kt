package com.example.ocr

import android.content.Context
import android.net.Uri
import android.provider.MediaStore
import android.util.Log
import com.google.mlkit.vision.common.InputImage
import com.google.mlkit.vision.text.TextRecognition
import com.google.mlkit.vision.text.arabic.ArabicTextRecognizerOptions // ุงุณุชูุฑุงุฏ ุฎูุงุฑุงุช ุงููุบุฉ ุงูุนุฑุจูุฉ
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.tasks.await // ูุงุณุชุฎุฏุงู .await() ูุน ููุงู ML Kit
import kotlinx.coroutines.withContext
import java.io.IOException

// ๐ก ุงูุขู OcrManager ููุจู ุงูุณูุงู (Context) ูู ุงูุจุงูู
class OcrManager(private val context: Context) {

    // โ ุชููุฆุฉ ML Kit ูุงุณุชุฎุฏุงู ูููุฐุฌ ุงููุบุฉ ุงูุนุฑุจูุฉ
    private val recognizer = TextRecognition.getClient(
        ArabicTextRecognizerOptions.Builder().build()
    )
    private val TAG = "OcrManager"

    // ูุง ุญุงุฌุฉ ูู init{} ุฃู Companion Object ูุชุญููู ุงูููุชุจุงุช ุฃู ูุณุฎ ูููุงุช ุงููุบุฉ.
    
    // โ ุฅุฒุงูุฉ ุฏุงูุฉ copyTessData()
    // โ ุฅุฒุงูุฉ ุฏุงูุฉ performOcrOnPdf() (ูุฃู ML Kit ูุง ูุฏุนููุง ูุจุงุดุฑุฉ)
    
    suspend fun performOcr(imageUri: Uri): String = withContext(Dispatchers.IO) {
        try {
            // 1. ุฅูุดุงุก InputImage ูู URI ุจุงุณุชุฎุฏุงู ุณูุงู ุงูุชุทุจูู
            val image = InputImage.fromFilePath(context, imageUri)
            
            // 2. ูุนุงูุฌุฉ ุงูุตูุฑุฉ ุจุงุณุชุฎุฏุงู ML Kit ูุงูุชุธุงุฑ ุงููุชูุฌุฉ
            val result = recognizer.process(image).await() 
            
            val fullText = result.text.trim()

            if (fullText.isNullOrBlank()) {
                "ูู ูุชู ุงูุนุซูุฑ ุนูู ุฃู ูุต ูู ุงูุตูุฑุฉ."
            } else {
                "ุชูุช ุนูููุฉ ุงููุฑุงุกุฉ ุงูุถูุฆูุฉ ุจูุฌุงุญ ุจุงุณุชุฎุฏุงู ML Kit!\n--- ูุชูุฌุฉ ุงููุฑุงุกุฉ ---\n$fullText"
            }

        } catch (e: IOException) {
            Log.e(TAG, "Failed to load image: ${e.message}")
            "ูุดู ูู ุชุญููู ุงูุตูุฑุฉ: ${e.message}"
        } catch (e: Exception) {
            Log.e(TAG, "ML Kit OCR error: ${e.message}")
            "ูุดู ูู ูุนุงูุฌุฉ OCR: ${e.message}"
        }
    }

    // ููุงุญุธุฉ ุญูู PDF:
    // ML Kit ูุง ูุฏุนู ูุนุงูุฌุฉ ูููุงุช PDF ูุจุงุดุฑุฉู. ุฅุฐุง ููุช ุจุญุงุฌุฉ ูุฏุนู PDFุ 
    // ูุฌุจ ุนููู ุงุณุชุฎุฏุงู PdfRenderer ูุชุญููู ูู ุตูุญุฉ ุฅูู ุตูุฑุฉ (Bitmap)ุ 
    // ุซู ุงุณุชุฏุนุงุก performOcr(bitmap) ููู ุตูุฑุฉ.
    suspend fun performOcrOnPdf(pdfUri: Uri): String {
        return "ูุธููุฉ ูุนุงูุฌุฉ ูููุงุช PDF ุบูุฑ ูุฏุนููุฉ ุญุงูููุง ูู ุฅุนุฏุงุฏ ML Kit ูุฐุง."
    }
}